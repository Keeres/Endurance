using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Chain : MonoBehaviour {

	public static List<int[]> chains = new List<int[]>();
	private int smoothing = 5;              // smooth out the aniamtion
	static public Chain instance; //the instance of our class that will do the work
	static int chainCount = 0;    //number of blocks in the chain, including once that were counted twice

	void Awake(){ //called when an instance awakes in the game
		instance = this; //set our static reference to our newly initialized instance
	}

	public static void detectHorizontalChains(){

		// loop thorugh the entire gameboard to find chains longer than 3
		for (int row = 0; row < GameManager.nRow ; row++) {
			for (int col = 0; col < GameManager.nCol - 2 ; col++) {  //last two col cannot form a chain of 3
				if (GameManager.findTag (col, row) != "none") {

					string chainType = GameManager.blocks [col, row].tag;

					// Find in the horizontal direction if the next to blocks matches the current block
					if (GameManager.findTag (col + 1, row) == chainType &&
					    GameManager.findTag (col + 2, row) == chainType) {

						// save the 3 blocks that forms the chain, there may be blocks being accounted multiple times
						for (int i = 0; i < 3; i++) {
							int[] chain = new int [] { col + i, row };
							chains.Add (chain);
						}
					}
				}
			}
		}
	}


	public static void detectVerticalChains(){

		// loop thorugh the entire gameboard to find chains longer than 3
		for (int col = 0; col < GameManager.nCol; col++) {
			for (int row = 0; row < GameManager.nRow - 2 ; row++) {  //last two col cannot form a chain of 3
				if (GameManager.findTag (col, row) != "none") {

					string chainType = GameManager.blocks [col, row].tag;

					// Find in the vertical direction if the next to blocks matches the current block
					if (GameManager.findTag (col, row + 1) == chainType &&
						GameManager.findTag (col, row + 2) == chainType) {

						// save the 3 blocks that forms the chain, there may be blocks being accounted multiple times
						for (int i = 0; i < 3; i++) {
							int[] chain = new int [] { col, row + i };
							chains.Add (chain);
						}
					}
				}
			}
		}
	}

	public static void removeChains(){
		chains.Clear();

		detectVerticalChains ();
		detectHorizontalChains ();
		animateChainedBlocks ();
	}

	public static void animateChainedBlocks(){
		chainCount = 0;

		foreach (int[] chain in chains) {
			Transform transform_1 = GameManager.blocks [chain [0], chain [1]].transform;
			instance.StartCoroutine (instance.transformBlocks(transform_1));
		}
	}
	

	// Problem with transform.scale too slow, change to animation later
	IEnumerator transformBlocks(Transform transform_1){
		Vector3 targetScale = new Vector3 (0.0f, 0.0f, 0.0f);

		// use Vector3.MoveTowards instead of Vector3.Lerp becuase ease scale was too slow
		while (transform_1.localScale != targetScale) {
			
			transform_1.localScale = Vector3.MoveTowards (transform_1.localScale, targetScale, (float)Time.deltaTime * smoothing);
	
			yield return null;
		}

		yield return null;

		chainCount++;

		if (chainCount == chains.Count) {
			Debug.Log ("scaling done");
			cleanUpChainedBlocks ();
		}
	}
		
	// destroys the blocks
	public static void cleanUpChainedBlocks(){
		Debug.Log ("start clean up");
		chainCount = 0;

		foreach (int[] chain in chains) {
			if (GameManager.blocks [chain [0], chain [1]] != null) {
				instance.StartCoroutine (instance.destroyBlock (GameManager.blocks [chain [0], chain [1]]));
			} else {
				chainCount++;
			}
		}
	}
		
	IEnumerator destroyBlock(Block block){
		DestroyImmediate(block.gameObject);
		yield return null;

		chainCount++;

		if (chainCount == chains.Count) {
			Debug.Log ("all blocks destroyed");
			Gap.fillGaps ();
		}
	}

}
