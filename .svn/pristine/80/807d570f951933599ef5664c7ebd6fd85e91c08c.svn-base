using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Chain : MonoBehaviour {

	public static List<int[]> chains = new List<int[]>();
	private int smoothing = 5;              // smooth out the aniamtion
	static public Chain instance; //the instance of our class that will do the work

	void Awake(){ //called when an instance awakes in the game
		instance = this; //set our static reference to our newly initialized instance
	}
	public static void detectHorizontalChains(){

		// loop thorugh the entire gameboard to find chains longer than 3
		for (int row = 0; row < GameManager.nRow ; row++) {
			for (int col = 0; col < GameManager.nCol - 2 ; col++) {  //last two col cannot form a chain of 3
				if (GameManager.findTag (col, row) != "none") {

					string chainType = GameManager.blocks [col, row].tag;
				//	Debug.Log(chainType + " " + col + " " + row);

					if (GameManager.findTag (col + 1, row) == chainType &&
					    GameManager.findTag (col + 2, row) == chainType) {

						int[] chain = new int [] { col, row, col + 1, row, col + 2, row};
						Debug.Log (chain[0] + " " + chain[1] + " " + chain[2] + " " + chain[3] + " " + chain[4] + " " + chain[5]);

						chains.Add (chain);
					}
				}
			}
		}
	}


	public static void detectVerticalChains(){

		// loop thorugh the entire gameboard to find chains longer than 3
		for (int col = 0; col < GameManager.nCol; col++) {
			for (int row = 0; row < GameManager.nRow - 2 ; row++) {  //last two col cannot form a chain of 3
				if (GameManager.findTag (col, row) != "none") {

					string chainType = GameManager.blocks [col, row].tag;
					//	Debug.Log(chainType + " " + col + " " + row);

					if (GameManager.findTag (col, row + 1) == chainType &&
						GameManager.findTag (col, row + 2) == chainType) {

						int[] chain = new int [] { col, row, col, row + 1, col, row + 2 };
						Debug.Log (chain[0] + " " + chain[1] + " " + chain[2] + " " + chain[3] + " " + chain[4] + " " + chain[5]);

						chains.Add (chain);
					}
				}
			}
		}
	}

	public static void removeChains(){
		chains.Clear();
		detectVerticalChains ();
		detectHorizontalChains ();
		animateChainedBlocks ();
	}

	public static void animateChainedBlocks(){

		foreach (int[] chain in chains) {
			Transform transform_1 = GameManager.blocks [chain [0], chain [1]].transform;
			Transform transform_2 = GameManager.blocks [chain [2], chain [3]].transform;
			Transform transform_3 = GameManager.blocks [chain [4], chain [5]].transform;
		
			instance.StartCoroutine (instance.transformBlocks(transform_1, transform_2, transform_3));
		}
	
	}

	IEnumerator transformBlocks(Transform transform_1, Transform transform_2, Transform transform_3){
		Vector3 targetScale = new Vector3 (0, 0, 0);

		while (transform_1.localScale != targetScale || transform_2.localScale != targetScale || transform_3.localScale != targetScale) {

			transform_1.localScale = Vector3.Lerp (transform_1.localScale, targetScale, (float)Time.deltaTime * smoothing);
			transform_2.localScale = Vector3.Lerp (transform_1.localScale, targetScale, (float)Time.deltaTime * smoothing);
			transform_3.localScale = Vector3.Lerp (transform_1.localScale, targetScale, (float)Time.deltaTime * smoothing);

			yield return null;
		}
	
		yield return null;
	}
		
}
